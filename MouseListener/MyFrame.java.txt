package com.learnGUI

import java.awt.Color;
import java.awt.FlowLayout;
import java.awt.event.*;
import javax.swing.*;

public class MyFrame extends JFrame implements MouseListener{

    JLabel label;

    MyFrame(){
       this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       this.setSize(500,500);
       this.setLayout(null);

       label = new JLabel();
       label.setBounds(0,0,100,100);
       label.setBackground(Color.red);
       label.setOpaque(true);
       label.addMouseListener(this);

       this.add(label);
       this.setVisible(true);
    }

   @Override
     public void mouseClicked(MouseEvent e){
        //Invoked when the mouse button has been clicked(pressed and released) on a component

        label.setBackground(Color.blue);   //you can try this out with all mouse events
     }

   @Override
     public void mousePressed(MouseEvent e){
        //Invoked when a mouse button has been pressed on a component

     }

   @Override
     public void mouseReleased(MouseEvent e){
        //Invoked when a mouse button has been released on a component
     }

   @Override
     public void mouseEntered(MouseEvent e){
       //Invoked when the mouse enters the area of a component
     }

   @Override
     public void mouseExited(MouseEvent e){
       //Invoked when the mouse exits the area of a component
     }   

  // Remember that adding the MouseListener to a component can have a huge change!!
  // this.addMouseListener()  will make the entire frame and all components in it react to the mouse event
  // label.addMouseListener() will make just the label and not the frame sensitive to mouse events

}